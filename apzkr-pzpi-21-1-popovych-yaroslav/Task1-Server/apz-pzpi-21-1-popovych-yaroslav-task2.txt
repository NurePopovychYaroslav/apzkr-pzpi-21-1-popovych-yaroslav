1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Для початку розробки потрібно проаналізувати концептуальне моделювання системи предметної області. Адміністратори університетів за допомогою застосунку повинні мати можливість створювати кампуси, додавати зони та з’єднувати їх дверима. Також важливо додати студентів, права доступу до дверей та групи із доступами, щоб можна було надавати певну кількість доступів студенту одночасно. Головною відмінністю системи є можливість пошуку шляху студенту від однієї зони до іншої, враховуючи права доступу до дверей та групи доступу, які має студент.
Головний адміністратор має можливість керувати акаунтами всіх адміністраторів системи та створювати нові. Він також може видалити користувача або змінити його пароль та інші дані акаунту.
Студенти матимуть застосунок на телефоні, який буде сканувати QR-коди на пристроях дверей (IoT пристрій) і надавати доступ або відмовляти в ньому.
Також важливо мати можливість створити копію бази даних, щоб уникнути втрати даних у випадку непередбачених обставин.
За допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію користувачів із системою (див. додаток А.1).

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

На рисунку 2 для кращої ілюстрації використаних технологій наведено діаграму розгортання, що описує архітектуру програми.
Система складається з 5 компонентів, а саме: веб-сервер з API, веб-додаток, база даних, мобільний застосунок та IoT-прилад. На сервері розміщується backend програмного продукту, який містить більшу частину бізнес-логіки. Веб-додаток дозволяє користувачам взаємодіяти із системою та робити замовлення. Мобільний застосунок, що працює на Android, дозволяє користувачам реєструвати нові IoT прилади у системі. IoT прилад відправляє статистичні дані та видає замовлення.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина системи «eLock» реалізована з використанням сучасних технологій та фреймворків, що забезпечують високу продуктивність, безпеку та масштабованість. Основні компоненти та технології, що використовуються в проекті, включають Java 22, Spring Boot, Hibernate, PostgreSQL та різні бібліотеки для безпеки та документування API.
Spring Boot використовується як основний фреймворк для створення серверної частини. Spring Boot Starter Data JPA використовується для роботи з базою даних за допомогою ORM Hibernate. Spring Boot Starter Security використовується для налаштування безпеки додатку. Spring Boot Starter OAuth2 Client використовується для інтеграції з OAuth2 сервером автентифікації Keycloak. Spring Boot Starter Validation використовується для валідації даних. Spring Boot Starter Web використовується для створення RESTful веб-сервісів.
PostgreSQL використовується як основна реляційна база даних. Liquibase використовується для управління змінами в БД, що дозволяє автоматизувати міграцію схем БД. MapStruct використовується для мапінгу даних між різними об’єктами DTO (Data Transfer Object) та Entity. Swagger/OpenAPI використовується для документування RESTful API.
Lombok використовується для зменшення кількості шаблонного коду за рахунок автоматичної генерації геттерів, сетерів, конструкторів тощо. Для запуску БД та Keycloak використовується Docker та відповідний docker-compose файл.
На рисунку 3.1 ілюстровано діаграму розгортання системи. Вона показує основні компоненти системи та їх зв’язки між собою: реляційна база даних PostgreSQL, яка використовується для зберігання всіх даних про користувачів, групи, дозволи, двері, кампуси та зони; серверна частина, реалізована на Java з використанням Spring Boot, відповідає за обробку всіх запитів від клієнтів (Frontend, Android додаток) та IoT пристроїв і надсилає запити до БД. Веб-інтерфейс системи реалізований за допомогою Thymeleaf та HTMX, надаючи адміністраторам можливість взаємодіяти з системою через браузер. Мобільний додаток на Android дозволяє студентам взаємодіяти з сервером для пошуку найкоротшого шляху в кампусі та перевірки доступу до конкретних дверей. IoT контролює доступ до дверей, працюючи на спеціальному мікро програмному забезпеченні та перевіряючи, чи має студент доступ до певних дверей, взаємодіючи з веб-сервером.
Компоненти системи представлені на діаграмі (див. додаток Б).
Також було реалізовано скрипт для зберігання бази даних у файл, який можна побачити у додатку В разом з іншими частинами коду системи.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Перед початком розробки сервера потрібно проаналізувати концептуальне моделювання предметної області. За допомогою програмного забезпечення клієнти повинні мати доступ до збереження, редагування власної інформації, перегляду її, а також статистики та бонусів за їх внесок у переробку сміття. І звичайно перш за все, вони можуть здавати сміття в пунктах прийому у найбільш зручний спосіб і при цьому можуть переглянути найближчі до них точки прийому, включно з функціями пошуку та фільтрування.
Адміністратор відповідає за підтримку працездатності програмної системи та редагування системних даних. Він має доступ до унікального функціоналу, до якого не мають інші користувачі, зокрема, у його розпорядженні є коригування логістичних та бізнес процесів, формування звітів роботи підприємств, змінення статусу операцій тощо. Адміністратор може переглядати усіх користувачів, які зареєстровані у системі, здійснювати пошук та сортування. Адміністратор може видалити користувача. Він також має можливість переглядати інформацію про всі проведені операції та їх редагування, а також має доступ до інших даних, що занесені до системи.
За допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних користувачів із системою (див. додаток А.1).

5 ПОБУДОВА ER-ДІАГРАМИ

При проєктуванні бази даних було розроблено ER діаграму (див. рис. 2.1). Вона складається з 8 таблиць: акаунти адміністраторів, кампуси, зони в кампусах, двері між зонами, рівні доступу, групи доступу, таблиця відношень доступів до дверей та таблиця відношень груп доступу і доступів.
Опис таблиць:

user_account: ключові поля — id, first_name, last_name, email, допоміжні поля — created_at, updated_at, created_by, updated_by, version.
campus: ключові поля — id, name, location, допоміжні поля.
area: ключові поля — id, name, campus_id, допоміжні поля.
door: ключові поля — id, name, area_from_id, area_to_id, допоміжні поля.
permission та groups: ключові поля — id, name, допоміжні поля.
Допоміжні таблиці door_permission та groups_permission з ключовими полями door_id, permission_id, group_id, permission_id відповідно.
Зв’язки між таблицями:

user_account має зв’язки з усіма ключовими таблицями через поля email та created_by.
campus має зв’язок один до багатьох із таблицею area.
area має два зв’язки один до багатьох із таблицею door.
door має зв’язок багато до багатьох із таблицею permission через таблицю door_permission.
groups має зв’язок багато до багатьох із таблицею permission через таблицю groups_permission.
Усі ключові таблиці мають поле version для реалізації "Optimistic Lock", щоб уникнути конфліктів при одночасному зміненні записів у БД.

6 СПЕЦИФІКАЦІЯ REST

REST API в проекті складається із 39 ендпоінтів. Для полегшення взаємодії з API було створено її специфікацію, яка наведена в таблиці 1.

Таблиця 1 – Специфікація REST
Метод	Ендпоінт	Опис	Вхідні параметри	Вихідні дані
GET	/api/v1/student	Отримати список студентів	-	Список студентів
POST	/api/v1/student	Створити нового студента	Дані студента	Створений студент
GET	/api/v1/student/{studentId}	Отримати інформацію про студента за його ID	studentId	Дані студента
PUT	/api/v1/student/{studentId}	Оновити інформацію про студента	studentId, Дані студента	Оновлений студент
DELETE	/api/v1/student/{studentId}	Видалити студента	studentId	Повідомлення про успішне видалення
GET	/api/v1/student/group	Отримати список груп студентів	-	Список студентських груп
POST	/api/v1/student/group	Додати студента до групи	Дані студентської групи	Доданий студент до групи
DELETE	/api/v1/student/{studentId}/group/{groupId}	Видалити студента з групи	studentId, groupId	Повідомлення про успішне видалення
GET	/api/v1/student/{studentId}/door/{doorId}/available	Перевірити доступ студента до певних дверей	studentId, doorId	Статус доступу
GET	/api/v1/permission	Отримати список дозволів	-	Список дозволів
POST	/api/v1/permission	Створити новий дозвіл	Дані дозволу	Створений дозвіл
GET	/api/v1/permission/{permissionId}	Отримати інформацію про дозвіл за його ID	permissionId	Дані дозволу
PUT	/api/v1/permission/{permissionId}	Оновити інформацію про дозвіл	permissionId, Дані дозволу	Оновлений дозвіл
DELETE	/api/v1/permission/{permissionId}	Видалити дозвіл	permissionId	Повідомлення про успішне видалення
GET	/api/v1/group	Отримати список груп	-	Список груп
POST	/api/v1/group	Створити нову групу	Дані групи	Створена група
GET	/api/v1/group/{groupId}	Отримати інформацію про групу за її ID	groupId	Дані групи
PUT	/api/v1/group/{groupId}	Оновити інформацію про групу	groupId, Дані групи	Оновлена група
DELETE	/api/v1/group/{groupId}	Видалити групу	groupId	Повідомлення про успішне видалення
GET	/api/v1/group/permission	Отримати список дозволів для груп	-	Список дозволів для груп
POST	/api/v1/group/permission	Додати дозвіл групі	Дані дозволу	Дозвіл доданий до групи
DELETE	/api/v1/group/{groupId}/permission/{permissionId}	Видалити дозвіл з групи	groupId, permissionId	Повідомлення про успішне видалення
GET	/api/v1/door/{areaId}/to	Отримати список дверей у певній зоні (до)	areaId	Список дверей
GET	/api/v1/door/{areaId}/from	Отримати список дверей у певній зоні (від)	areaId	Список дверей
GET	/api/v1/door/{areaId}/permission	Отримати список дозволів для дверей у певній зоні	areaId	Список дозволів
POST	/api/v1/door	Створити нові двері	Дані дверей	Створені двері
PUT	/api/v1/door/{doorId}	Оновити інформацію про двері	doorId, Дані дверей	Оновлені двері
DELETE	/api/v1/door/{doorId}	Видалити двері	doorId	Повідомлення про успішне видалення
GET	/api/v1/campus	Отримати список кампусів	-	Список кампусів
POST	/api/v1/campus	Створити новий кампус	Дані кампусу	Створений кампус
GET	/api/v1/campus/{campusId}	Отримати інформацію про кампус за його ID	campusId	Дані кампусу
PUT	/api/v1/campus/{campusId}	Оновити інформацію про кампус	campusId, Дані кампусу	Оновлений кампус
DELETE	/api/v1/campus/{campusId}	Видалити кампус	campusId	Повідомлення про успішне видалення
GET	/api/v1/area/{campusId}	Отримати список зон у певному кампусі	campusId	Список зон
POST	/api/v1/area/{campusId}	Створити нову зону в кампусі	campusId, Дані зони	Створена зона
GET	/api/v1/area/{campusId}/{areaId}	Отримати інформацію про зону за її ID	campusId, areaId	Дані зони
PUT	/api/v1/area/{campusId}/{areaId}	Оновити інформацію про зону	campusId, areaId, Дані зони	Оновлена зона
DELETE	/api/v1/area/{campusId}/{areaId}	Видалити зону	campusId, areaId	Повідомлення про успішне видалення
GET	/api/v1/area/{campusId}/path	Отримати маршрут між зонами	campusId, areaId, Дані маршруту	Маршрут між зонами

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів зображує архітектуру програмної системи «eLock». Вона складається з наступних складових та їх взаємодій (див. рис. 7.1):
Старт програми починається з файлу Application.java, який відповідає за конфігурацію, запуск і реєстрацію залежностей. Він взаємодіє з компонентом Web server BackEnd, який включає кілька контролерів: StudentController, PermissionController, GroupController, DoorController, CampusController, та AreaController. Ці контролери обробляють запити від веб-клієнта, мобільного додатку та IoT пристроїв.
Компонент Backend взаємодіє з реляційною базою даних PostgreSQL через ORM Hibernate, забезпечуючи зберігання та управління даними. Веб-інтерфейс системи реалізований за допомого
