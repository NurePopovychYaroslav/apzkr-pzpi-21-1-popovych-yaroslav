1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ

Клієнтська частина системи "eLock" призначена для двох основних ролей: адміністратора та головного адміністратора. Основні можливості та потреби головного адміністратора полягають у створенні звичайних адміністраторів у системі та керуванні їх даними через панель адміністрування "Keycloak". Головний адміністратор може переглядати наявних адміністраторів, створювати нових, редагувати особисті дані вже створених адміністраторів, видаляти їх із системи та завершувати їх сесії. Ці дії забезпечують ефективне управління персоналом, відповідальним за обслуговування системи.
Адміністратори, у свою чергу, мають низку важливих завдань. Вони керують камбузами, зонами, дверима, доступами, групами доступів та студентами. Адміністратори можуть переглядати, створювати, редагувати та видаляти ці об'єкти, а також встановлювати зв'язки між ними. Наприклад, адміністратори можуть створювати нові камбузи, додавати до них зони, встановлювати двері між зонами, а також призначати доступи до цих зон і дверей. Вони також можуть створювати та управляти групами доступів, призначати студентів до цих груп, що дозволяє чітко контролювати, хто і коли може входити в певні приміщення.
Для реалізації клієнтської частини системи використовувалися сучасні технології. Однією з ключових технологій є HTMX, який дозволяє здійснювати запити до серверу без необхідності перезавантажувати всю сторінку. Це досягається завдяки використанню атрибутів, таких як hx-post, hx-get, hx-put та hx-delete, які відповідають за різні типи HTTP-запитів. Атрибути hx-target та hx-swap визначають, які елементи сторінки мають бути замінені на відповідь сервера, що робить взаємодію з користувачем швидкою та зручною.
Шаблонізатор Thymeleaf використовується для серверного рендерингу сторінок (SSR) і забезпечує можливість зручної генерації HTML-коду на основі даних з сервера. Використання Thymeleaf у поєднанні з HTMX дозволяє створювати систему, яка поєднує в собі переваги серверного та клієнтського рендерингу (CSR).
Інтерфейс користувача створюється з використанням бібліотеки Bootstrap, яка надає готові стилі та компоненти для швидкого створення візуально приємного та зручного веб-додатку. Bootstrap дозволяє забезпечити єдиний стиль для всіх елементів інтерфейсу, що робить систему більш професійною та зручною для користувачів.
Для забезпечення навігації по сайту використовується бібліотека Spring MVC. Вона забезпечує маршрутизацію запитів користувачів до відповідних контролерів, які обробляють ці запити та повертають відповідь у вигляді HTML-коду, згенерованого за допомогою Thymeleaf. Анотація @Controller використовується для позначення класів, які відповідають за обробку запитів, а Dispatcher Servlet передає запити до відповідних методів контролерів за допомогою HandlerMapping.
Код клієнтської частини розгортається на сервері Tomcat, що забезпечує стабільну роботу та високу продуктивність. Для автоматичного оновлення змін у реальному часі використовується Spring Dev Tools, що дозволяє розробникам швидко вносити зміни та бачити результати без необхідності перезапускати сервер.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

На діаграмі прецедентів показано взаємодію головного адміністратора та адміністраторів із системою. Головний адміністратор має можливість авторизації в Keycloak, створення, редагування, видалення та перегляду адміністраторів. Ці можливості дозволяють головному адміністратору ефективно управляти персоналом, що відповідає за обслуговування системи. Адміністратор керує камбузами, зонами, дверима, доступами, групами доступів та студентами, а також встановлює зв'язки між цими об'єктами. Це забезпечує повний контроль над доступом до різних частин університетських камбузів, що є критично важливим для безпеки та організації роботи.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Діаграма пакетів показує абстрактний принцип роботи клієнтської системи. Система використовує вертикальну архітектуру з поділом на функціональні теки. Це дозволяє розділяти логіку та представлення даних, що спрощує розробку та підтримку системи. Є тека "fragments", де зберігаються фрагменти, які використовуються іншими сторінками або фрагментами. Головний файл index.html імпортує фрагменти для підключення необхідних ресурсів, таких як Bootstrap та HTMX, і для відображення заголовка сайту. Це дозволяє легко змінювати та оновлювати компоненти інтерфейсу без необхідності вносити зміни у всі сторінки системи.

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів деталізує архітектуру системи, показуючи зв'язки між різними компонентами. Кожна функціональна область має свою теку з відповідними файлами, які імпортують фрагменти з "fragments". Це дозволяє системі бути гнучкою та розширюваною. Наприклад, для кожної таблиці є своя тека, що містить відповідні HTML-файли, які імпортують необхідні фрагменти. Це дозволяє легко додавати нові функціональні можливості або змінювати існуючі без ризику порушити роботу інших частин системи.

5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

На діаграмі взаємодії показано процеси авторизації головного адміністратора в Keycloak, створення та керування адміністраторами, а також авторизацію адміністратора в "eLock". Після авторизації адміністратори можуть керувати камбузами, зонами, дверима, доступами, групами доступів та студентами, а також встановлювати зв'язки між ними. Це забезпечує повний цикл управління доступом, від створення об'єктів до призначення доступів та перевірки їх коректності.

ВИСНОВКИ

Під час лабораторної роботи було розроблено документацію щодо архітектури та компонентів клієнтської частини системи контролю доступу "eLock". Створено клієнтську частину, яка забезпечує ефективну взаємодію з серверною частиною для управління доступом в університетських камбузах. Використано сучасні технології HTMX та Bootstrap для забезпечення високої якості та надійності програмного продукту. Проведено тестування для перевірки працездатності системи, що підтвердило її ефективність та надійність.
Таким чином, розроблена система "eLock" забезпечує гнучке та ефективне управління доступом у великих організаціях, таких як університети. Завдяки використанню сучасних технологій та продуманої архітектури, система є надійною, масштабованою та легкою у використанні. Вона дозволяє адміністраторам швидко та ефективно керувати доступами, забезпечуючи високий рівень безпеки та організованості в університетських камбузах.